{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","CheckoutCancelled","CheckoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","errorMessage","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","history","goBack","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","InvalidMessage","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.dde3ee54.chunk.js","sourcesContent":["import React from 'react';\n\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\nimport classes from './CheckoutSummary.module.css'\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{ width: '100%', margin: 'auto' }}>\n                <Burger ingredients={props.ingredients} />\n                <Button\n                    btnType=\"Danger\"\n                    clicked={props.CheckoutCancelled}>CANCEL</Button>\n                <Button\n                    btnType=\"Success\"\n                    clicked={props.CheckoutContinued}>CONTINUE</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button'\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                errorMessage: 'Enter a valid name'\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                errorMessage: 'Enter a valid street'\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false,\n                errorMessage: 'Enter a valid zip code'\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n                errorMessage: 'Enter a valid country'\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false,\n                errorMessage: 'Enter a valid mail'\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' },\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            }\n        },\n        formIsValid: false\n    }\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n    }\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        errorMessage={formElement.config.errorMessage}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                { form}\n            </div>\n        );\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData'\n\nclass Checkout extends Component {\n\n    CheckoutCancelled = () => {\n        this.props.history.goBack();\n    }\n\n    CheckoutContinued = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />;\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ings}\n                        CheckoutCancelled={this.CheckoutCancelled}\n                        CheckoutContinued={this.CheckoutContinued} />\n                    <Route\n                        path={this.props.match.path + '/contact-data'}\n                        component={ContactData} />\n                </div>\n            );\n        };\n\n        return (\n            <div>\n                {summary}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n    let inputElement = null;\n    let errorMessage = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n        errorMessage = <p className={classes.InvalidMessage}>{props.errorMessage}</p>;\n    }\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = (\n                <input\n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig}\n                    value={props.value}\n                    onChange={props.changed} />\n            )\n            break;\n        case ('textarea'):\n            inputElement = (\n                <textarea\n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig}\n                    value={props.value}\n                    onChange={props.changed} />\n            )\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option\n                            key={option.value}\n                            value={option.value} >\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            )\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')}  {...props.elementConfig} value={props.value} />\n    }\n    return (\n\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"InvalidMessage\":\"Input_InvalidMessage__3liTp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}