{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","errorMessage","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","InvalidMessage","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.c9faa137.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false,\n                errorMessage: 'Enter a valid email'\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false,\n                errorMessage: 'Enter a valid password'\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n        this.setState({ controls: updatedControls })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup };\n        });\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                errorMessage={formElement.config.errorMessage}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={(event) => this.submitHandler(event)}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: !!state.auth.token,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n","import React from 'react';\n\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n    let inputElement = null;\n    let errorMessage = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n        errorMessage = <p className={classes.InvalidMessage}>{props.errorMessage}</p>;\n    }\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = (\n                <input\n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig}\n                    value={props.value}\n                    onChange={props.changed} />\n            )\n            break;\n        case ('textarea'):\n            inputElement = (\n                <textarea\n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig}\n                    value={props.value}\n                    onChange={props.changed} />\n            )\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    {...props.elementConfig}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option\n                            key={option.value}\n                            value={option.value} >\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            )\n            break;\n        default:\n            inputElement = <input className={inputClasses.join(' ')}  {...props.elementConfig} value={props.value} />\n    }\n    return (\n\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"InvalidMessage\":\"Input_InvalidMessage__3liTp\"};"],"sourceRoot":""}